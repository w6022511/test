<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.eking.tourism.repository.mapper.AuthHistoryMapper">
  <resultMap id="BaseResultMap" type="org.eking.tourism.repository.entity.AuthHistory">
    <id column="ID" jdbcType="BIGINT" property="id" />
    <result column="TICKET_ORDER_ID" jdbcType="BIGINT" property="ticketOrderId" />
    <result column="REAL_USER_ID" jdbcType="BIGINT" property="realUserId" />
    <result column="QR_CODE_ID" jdbcType="INTEGER" property="qrCodeId" />
    <result column="CREATE_BY_OPEN_ID" jdbcType="INTEGER" property="createByOpenId" />
    <result column="CREATE_DATE" jdbcType="TIMESTAMP" property="createDate" />
    <result column="START_DATE" jdbcType="TIMESTAMP" property="startDate" />
    <result column="END_DATE" jdbcType="TIMESTAMP" property="endDate" />
    <result column="RECOGNITION_TYPE" jdbcType="INTEGER" property="recognitionType" />
    <result column="FACTORY_ID" jdbcType="INTEGER" property="factoryId" />
  </resultMap>
  <sql id="Base_Column_List">
    ID, TICKET_ORDER_ID, REAL_USER_ID, QR_CODE_ID, CREATE_BY_OPEN_ID, CREATE_DATE, START_DATE, 
    END_DATE, RECOGNITION_TYPE, FACTORY_ID
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_tourism_auth_history
    where ID = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_tourism_auth_history
    where ID = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="org.eking.tourism.repository.entity.AuthHistory">
    <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_tourism_auth_history (ID, TICKET_ORDER_ID, REAL_USER_ID, 
      QR_CODE_ID, CREATE_BY_OPEN_ID, CREATE_DATE, 
      START_DATE, END_DATE, RECOGNITION_TYPE, 
      FACTORY_ID)
    values (#{id,jdbcType=BIGINT}, #{ticketOrderId,jdbcType=BIGINT}, #{realUserId,jdbcType=BIGINT}, 
      #{qrCodeId,jdbcType=INTEGER}, #{createByOpenId,jdbcType=INTEGER}, #{createDate,jdbcType=TIMESTAMP}, 
      #{startDate,jdbcType=TIMESTAMP}, #{endDate,jdbcType=TIMESTAMP}, #{recognitionType,jdbcType=INTEGER}, 
      #{factoryId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="org.eking.tourism.repository.entity.AuthHistory">
    <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_tourism_auth_history
    <trim prefix="(" suffix=")" suffixOverrides=",">
      ID,
      <if test="ticketOrderId != null">
        TICKET_ORDER_ID,
      </if>
      <if test="realUserId != null">
        REAL_USER_ID,
      </if>
      <if test="qrCodeId != null">
        QR_CODE_ID,
      </if>
      <if test="createByOpenId != null">
        CREATE_BY_OPEN_ID,
      </if>
      <if test="createDate != null">
        CREATE_DATE,
      </if>
      <if test="startDate != null">
        START_DATE,
      </if>
      <if test="endDate != null">
        END_DATE,
      </if>
      <if test="recognitionType != null">
        RECOGNITION_TYPE,
      </if>
      <if test="factoryId != null">
        FACTORY_ID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{id,jdbcType=BIGINT},
      <if test="ticketOrderId != null">
        #{ticketOrderId,jdbcType=BIGINT},
      </if>
      <if test="realUserId != null">
        #{realUserId,jdbcType=BIGINT},
      </if>
      <if test="qrCodeId != null">
        #{qrCodeId,jdbcType=INTEGER},
      </if>
      <if test="createByOpenId != null">
        #{createByOpenId,jdbcType=INTEGER},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="startDate != null">
        #{startDate,jdbcType=TIMESTAMP},
      </if>
      <if test="endDate != null">
        #{endDate,jdbcType=TIMESTAMP},
      </if>
      <if test="recognitionType != null">
        #{recognitionType,jdbcType=INTEGER},
      </if>
      <if test="factoryId != null">
        #{factoryId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.eking.tourism.repository.entity.AuthHistory">
    update t_tourism_auth_history
    <set>
      <if test="ticketOrderId != null">
        TICKET_ORDER_ID = #{ticketOrderId,jdbcType=BIGINT},
      </if>
      <if test="realUserId != null">
        REAL_USER_ID = #{realUserId,jdbcType=BIGINT},
      </if>
      <if test="qrCodeId != null">
        QR_CODE_ID = #{qrCodeId,jdbcType=INTEGER},
      </if>
      <if test="createByOpenId != null">
        CREATE_BY_OPEN_ID = #{createByOpenId,jdbcType=INTEGER},
      </if>
      <if test="createDate != null">
        CREATE_DATE = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="startDate != null">
        START_DATE = #{startDate,jdbcType=TIMESTAMP},
      </if>
      <if test="endDate != null">
        END_DATE = #{endDate,jdbcType=TIMESTAMP},
      </if>
      <if test="recognitionType != null">
        RECOGNITION_TYPE = #{recognitionType,jdbcType=INTEGER},
      </if>
      <if test="factoryId != null">
        FACTORY_ID = #{factoryId,jdbcType=INTEGER},
      </if>
    </set>
    where ID = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.eking.tourism.repository.entity.AuthHistory">
    update t_tourism_auth_history
    set TICKET_ORDER_ID = #{ticketOrderId,jdbcType=BIGINT},
      REAL_USER_ID = #{realUserId,jdbcType=BIGINT},
      QR_CODE_ID = #{qrCodeId,jdbcType=INTEGER},
      CREATE_BY_OPEN_ID = #{createByOpenId,jdbcType=INTEGER},
      CREATE_DATE = #{createDate,jdbcType=TIMESTAMP},
      START_DATE = #{startDate,jdbcType=TIMESTAMP},
      END_DATE = #{endDate,jdbcType=TIMESTAMP},
      RECOGNITION_TYPE = #{recognitionType,jdbcType=INTEGER},
      FACTORY_ID = #{factoryId,jdbcType=INTEGER}
    where ID = #{id,jdbcType=BIGINT}
  </update>
</mapper>